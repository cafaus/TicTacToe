{"version":3,"sources":["components/square.jsx","components/board.jsx","App.js","serviceWorker.js","index.js"],"names":["Square","props","winner","onWinner","className","onClick","value","Board","i","j","this","squares","renderSquare","Component","App","state","history","Array","fill","historyMove","concat","undefined","winnerPosition","stepNumber","xIsNext","handleClick","newHistory","slice","newHistoryMove","current","length","newSquares","calculateWinner","setState","lines","a","b","c","step","row","col","key","drawStatus","status","moves","map","move","desc","calculateHistory","jumpTo","Fragment","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f3546f80.chunk.js","sourcesContent":["import React from \"react\";\r\nfunction Square(props) {\r\n  let winner = \"square\";\r\n  if (props.onWinner) {\r\n    winner += \"Winner\";\r\n  }\r\n\r\n  return (\r\n    <button className={winner} onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nexport default Square;\r\n","import React, { Component } from \"react\";\r\nimport Square from \"./square\";\r\n\r\nclass Board extends Component {\r\n  renderSquare(i) {\r\n    let winner = false;\r\n    for (let j = 0; j < 3; j++) {\r\n      if (this.props.onWinner === null) continue;\r\n      if (this.props.onWinner[j] === i) {\r\n        winner = true;\r\n      }\r\n    }\r\n\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n        onWinner={winner}\r\n      ></Square>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(0)}\r\n          {this.renderSquare(1)}\r\n          {this.renderSquare(2)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(3)}\r\n          {this.renderSquare(4)}\r\n          {this.renderSquare(5)}\r\n        </div>\r\n        <div className=\"board-row\">\r\n          {this.renderSquare(6)}\r\n          {this.renderSquare(7)}\r\n          {this.renderSquare(8)}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Board;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Board from \"./components/board\";\n\nclass App extends Component {\n  state = {\n    history: [{ squares: Array(9).fill(null) }],\n    historyMove: [].fill(null).concat(undefined),\n    winnerPosition: [].fill(null),\n    stepNumber: 0,\n    xIsNext: true,\n  };\n\n  handleClick = (i, winner) => {\n    const newHistory = this.state.history.slice(0, this.state.stepNumber + 1);\n    const newHistoryMove = this.state.historyMove.slice(\n      0,\n      this.state.stepNumber + 1\n    );\n    const current = newHistory[newHistory.length - 1];\n    const newSquares = [...current.squares];\n\n    if (this.calculateWinner(newSquares) || newSquares[i]) return;\n    newSquares[i] = this.state.xIsNext ? \"X\" : \"O\";\n\n    this.setState({\n      history: newHistory.concat([\n        {\n          squares: newSquares,\n        },\n      ]),\n      stepNumber: newHistory.length,\n      winnerPosition: winner,\n      xIsNext: !this.state.xIsNext,\n      historyMove: newHistoryMove.concat(i),\n    });\n  };\n\n  calculateWinner(squares) {\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n      const [a, b, c] = lines[i];\n      if (\n        squares[a] &&\n        squares[a] === squares[b] &&\n        squares[b] === squares[c]\n      ) {\n        return lines[i];\n      }\n    }\n    return null;\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n    });\n  }\n\n  calculateHistory(c) {\n    let row = 1,\n      col = 0;\n\n    col = c + 1;\n\n    if (c === undefined) return <span>null</span>;\n    if (c > 5) {\n      col -= 6;\n      row += 2;\n    } else if (c > 2) {\n      col -= 3;\n      ++row;\n    }\n\n    return (\n      <span key={c}>\n        ({col}, {row})\n      </span>\n    );\n  }\n\n  render() {\n    const current = this.state.history[this.state.stepNumber];\n    const winner = this.calculateWinner(current.squares);\n    let drawStatus = false;\n    if (this.state.history.length === 10) drawStatus = true;\n    const moves = this.state.history.map((step, move) => {\n      const desc = move ? \"Go To Move #\" + move : \"Go To Game Start\";\n      const history = this.calculateHistory(this.state.historyMove[move]);\n      return (\n        <li key={move}>\n          <button className=\"button\" onClick={() => this.jumpTo(move)}>\n            {desc}\n          </button>\n          {history === null\n            ? this.calculateHistory(this.state.historyMove[move])\n            : \"\"}\n        </li>\n      );\n    });\n\n    let status;\n\n    if (winner) status = \"THE WINNER IS \" + current.squares[winner[0]];\n    else if (drawStatus) status = \"DRAW\";\n    else status = \"Next Player Is \" + (this.state.xIsNext ? \"X\" : \"O\");\n\n    return (\n      <React.Fragment>\n        <div className=\"app\">\n          <div className=\"game\">\n            <div className=\"game-board\">\n              <Board\n                squares={current.squares}\n                onClick={(i) => this.handleClick(i, winner)}\n                onWinner={winner}\n              ></Board>\n            </div>\n          </div>\n          <div className=\"game-info\">\n            <div>{status}</div>\n            <ol className=\"list__none\">{moves}</ol>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}